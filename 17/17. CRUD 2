CRUD 2

CrUD Batch — multiple Creation, Updates, Deletion

Программа запускается с одним из следующих наборов параметров:

-c name1 sex1 bd1 name2 sex2 bd2 ...

-u id1 name1 sex1 bd1 id2 name2 sex2 bd2 ... 

-d id1 id2 id3 id4 ...

-i id1 id2 id3 id4 ...

Значения параметров:

name — имя, String

sex — пол, «м» или «ж», одна буква

bd — дата рождения в следующем формате 15/04/1990

-с — добавляет всех людей с заданными параметрами в конец allPeople, выводит id (index) на экран в соответствующем порядке

-u — обновляет соответствующие данные людей с заданными id

-d — производит логическое удаление человека с id, заменяет все его данные на null

-i — выводит на экран информацию о всех людях с заданными id: name sex bd

id соответствует индексу в списке

Формат вывода даты рождения 15-Apr-1990

Все люди должны храниться в allPeople

Порядок вывода данных соответствует вводу данных

Обеспечить корректную работу с данными для множества нитей (чтоб не было затирания данных)

Используйте Locale.ENGLISH в качестве второго параметра для SimpleDateFormat

Пример вывода для параметра -і с двумя id:

Миронов м 15-Apr-1990

Миронова ж 25-Apr-1997

Требования:

1. Класс Solution должен содержать public static volatile поле allPeople типа List.

2. Класс Solution должен содержать статический блок, в котором добавляются два человека в список allPeople.

3. При параметре -с программа должна добавлять всех людей с заданными параметрами в конец списка allPeople, и выводить id каждого (index) на экран.

4. При параметре -u программа должна обновлять данные людей с заданными id в списке allPeople.

5. При параметре -d программа должна логически удалять людей с заданными id в списке allPeople.

6. При параметре -i программа должна выводить на экран данные о всех людях с заданными id по формату указанному в задании.

7. Метод main класса Solution должен содержать оператор switch по значению args[0].

8. Каждый case оператора switch должен иметь блок синхронизации по allPeople.

---------------------------------------------------------------------------------------------------------------------------------------------

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;

public class Solution {
    public static volatile List<Person> allPeople = new ArrayList<Person>();

    static {
        allPeople.add(Person.createMale("Иванов Иван", new Date()));  //сегодня родился    id=0
        allPeople.add(Person.createMale("Петров Петр", new Date()));  //сегодня родился    id=1
    }

    public static void main(String[] args) {
        SimpleDateFormat bdIn = new SimpleDateFormat("dd/MM/yyyy", Locale.ENGLISH);
        SimpleDateFormat bdOut = new SimpleDateFormat("dd-MMM-yyyy", Locale.ENGLISH);

        try {
            switch (args[0]) {
                case "-c":
                    synchronized (allPeople) {
                        Person person = null;
                        for (int i = 1; i < args.length; i++) {
                            if (args[i].equals("м")) {
                                person = Person.createMale(args[i - 1], bdIn.parse(args[i + 1]));
                                allPeople.add(person);
                                System.out.println(allPeople.indexOf(person));
                            } else if (args[i].equals("ж")) {
                                person = Person.createFemale(args[i - 1], bdIn.parse(args[i + 1]));
                                allPeople.add(person);
                                System.out.println(allPeople.indexOf(person));
                            }
                        }
                    }
                    break;
            }
            switch (args[1]) {
                case "-u":
                    synchronized (allPeople) {
                        for (int i = 1; i < args.length; i += 4) {
                            allPeople.get(Integer.parseInt(args[i])).setName(args[i + 1]);
                            if (args[i + 2].equals("м")) {
                                allPeople.get(Integer.parseInt(args[i])).setSex(Sex.MALE);
                            }
                            if (args[i + 2].equals("ж")) {
                                allPeople.get(Integer.parseInt(args[i])).setSex(Sex.FEMALE);
                            }
                            allPeople.get(Integer.parseInt(args[i])).setBirthDate(bdIn.parse(args[i + 3]));
                        }
                    }
            }
            switch (args[2]){
                case "-d":
                    synchronized (allPeople) {
                        for(int i = 1; i < args.length; i++){
                            allPeople.get(Integer.parseInt(args[i])).setName(null);
                            allPeople.get(Integer.parseInt(args[i])).setSex(null);
                            allPeople.get(Integer.parseInt(args[i])).setBirthDate(null);
                        }
                    } break;
            }
            switch (args[3]){
                case "-i":
                    synchronized (allPeople){
                        for (int i = 1; i < args.length; i++) {
                            System.out.println(allPeople.get(Integer.parseInt(args[i])).getName() +
                                    " " + (allPeople.get(Integer.parseInt(args[i])).getSex().equals(Sex.MALE) ? "м" : "ж") +
                                    " " + bdOut.format(allPeople.get(Integer.parseInt(args[i])).getBirthDate()));
                        }
                    }break;
            }
        }catch (ParseException e){
            System.out.println(e);
        }
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------
import java.util.Date;

public class Person {
    private String name;
    private Sex sex;
    private Date birthDate;

    private Person(String name, Sex sex, Date birthDate) {
        this.name = name;
        this.sex = sex;
        this.birthDate = birthDate;
    }

    public static Person createMale(String name, Date birthDate) {
        return new Person(name, Sex.MALE, birthDate);
    }

    public static Person createFemale(String name, Date birthDate) {
        return new Person(name, Sex.FEMALE, birthDate);
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Sex getSex() {
        return sex;
    }

    public void setSex(Sex sex) {
        this.sex = sex;
    }

    public Date getBirthDate() {
        return birthDate;
    }

    public void setBirthDate(Date birthDate) {
        this.birthDate = birthDate;
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------
public enum Sex {
    MALE,
    FEMALE
}
