///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
1. Осваивание статического блока

Задача: 1. В отдельных файлах создать классы Plane и Helicopter, реализующие интерфейс Flyable.
2. Класс Plane должен иметь 1 конструктор с параметром int – количество перевозимых пассажиров.
3. В статическом методе reset класса Solution:
3.1. Считать с консоли параметр типа String. Параметр может быть "plane" или "helicopter".
3.2. Если параметр равен "helicopter", то статическому объекту Flyable result присвоить
объект класса Helicopter.
3.3. Если параметр равен "plane", то считать второй параметр типа int,
статическому объекту Flyable result присвоить объект класса Plane.
4. В статическом блоке инициализировать Flyable result вызвав метод reset.
5. Закрыть поток ввода методом close(). 
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import java.util.*;

public class Solution{

    public static void main(String[] args) {

    }

    public static Flyable result;

    static {
       reset();
    }

    public static void reset() {
        try {
            Scanner keyboard = new Scanner(System.in);
            String input = keyboard.nextLine();
            if (input.equals("helicopter")) {
                result = new Helicopter();
            }
            if (input.equals("plane")) {
                int y = keyboard.nextInt();
                result = new Plane(y);
            }
        } catch (Exception e) {
            e.getMessage();
        }
    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public class Plane implements Flyable {

    private int passengerCount;

    public Plane(int passengerCount) {
        this.passengerCount = passengerCount;
    }

    @Override
    public void fly() {

    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public class Helicopter implements Flyable {
    @Override
    public void fly() {

    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public interface Flyable {
    void fly();
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Осваивание статического блока

1. В отдельных файлах создать классы Plane и Helicopter, реализующие интерфейс Flyable.

2. Класс Plane должен иметь конструктор с параметром int — количество перевозимых пассажиров.

3. В статическом методе reset класса Solution:

3.1. Считать с консоли параметр типа String.

3.2. Если параметр равен «helicopter«, то статическому объекту Flyable result присвоить объект класса Helicopter.

3.3. Если параметр равен «plane«, то считать второй параметр типа int(количество пассажиров), статическому объекту Flyable result присвоить объект класса Plane.

4. В статическом блоке инициализировать Flyable result вызвав метод reset.

5. Закрыть поток ввода методом close().


Требования:

1. Класс Plane должен быть создан в отдельном файле и реализовывать интерфейс Flyable.

2. Класс Helicopter должен быть создан в отдельном файле и реализовывать интерфейс Flyable.

3. Класс Plane должен иметь конструктор с параметром int.

4. В классе Solution должен быть реализован статический метод reset.

5. Метод reset должен считывать строку с клавиатуры.

6. Если введенная строка равна "helicopter", в переменную result должен быть сохранен объект типа Helicopter.

7. Если введенная строка равна "plane", в переменную result должен быть сохранен объект типа Plane.

8. Поле result класса Solution должно быть инициализировано в статическом блоке путем вызова метода reset.Осваивание статического блока

1. В отдельных файлах создать классы Plane и Helicopter, реализующие интерфейс Flyable.

2. Класс Plane должен иметь конструктор с параметром int — количество перевозимых пассажиров.

3. В статическом методе reset класса Solution:

3.1. Считать с консоли параметр типа String.

3.2. Если параметр равен «helicopter«, то статическому объекту Flyable result присвоить объект класса Helicopter.

3.3. Если параметр равен «plane«, то считать второй параметр типа int(количество пассажиров), статическому объекту Flyable result присвоить объект класса Plane.

4. В статическом блоке инициализировать Flyable result вызвав метод reset.

5. Закрыть поток ввода методом close().


Требования:

1. Класс Plane должен быть создан в отдельном файле и реализовывать интерфейс Flyable.

2. Класс Helicopter должен быть создан в отдельном файле и реализовывать интерфейс Flyable.

3. Класс Plane должен иметь конструктор с параметром int.

4. В классе Solution должен быть реализован статический метод reset.

5. Метод reset должен считывать строку с клавиатуры.

6. Если введенная строка равна "helicopter", в переменную result должен быть сохранен объект типа Helicopter.

7. Если введенная строка равна "plane", в переменную result должен быть сохранен объект типа Plane.

8. Поле result класса Solution должно быть инициализировано в статическом блоке путем вызова метода reset.

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
