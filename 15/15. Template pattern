//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2. Template pattern

Задача: 1. В отдельном файле создать класс DrinkMaker с тремя абстрактными методами:
- void getRightCup() - выбрать подходящую чашку
- void putIngredient() - положить ингредиенты
- void pour() - залить жидкостью
2. В классе DrinkMaker создать и реализовать метод void makeDrink(), который готовит напиток в такой последовательности: выбирает чашку, кладет ингредиенты, заливает жидкостью.
3. В отдельных файлах создать классы LatteMaker и TeaMaker, которые наследуются от DrinkMaker.
4. Распредели следующие фразы между всеми методами в классах LatteMaker и TeaMaker, различные фразы для различных методов.
5. Каждый метод должен выводить в консоль свою фразу не пересекаясь с другими методами.
6. Фразы:
"Заливаем водой"
"Берем чашку для латте"
"Насыпаем чай"
"Берем чашку для чая"
"Заливаем молоком с пенкой"
"Делаем кофе" 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public class Solution{

    public static void main(String[] args) {
        System.out.println("Инструкция по изготовлению Латте в три действия:");
        LatteMaker latte = new LatteMaker();
        latte.makeDrink();
        System.out.println("Инструкция по изготовлению чая в три действия:");
        TeaMaker tea = new TeaMaker();
        tea.makeDrink();
    }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public abstract class DrinkMaker {
    abstract void getRightCup();

    abstract void putIngredient();

    abstract void pour();

    void makeDrink(){
        getRightCup();
        putIngredient();
        pour();
    }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public class LatteMaker extends DrinkMaker{
    @Override
    void getRightCup() {
        System.out.println("Берём чашку для латте");
    }

    @Override
    void putIngredient() {
        System.out.println("Заливаем молоком с пенкой");
    }

    @Override
    void pour() {
        System.out.println("Делаем кофе");
    }

    @Override
    void makeDrink() {
        getRightCup();
        putIngredient();
        pour();
    }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public class TeaMaker extends DrinkMaker{
    @Override
    void getRightCup() {
        System.out.println("Берём чашку для чая");
    }

    @Override
    void putIngredient() {
        System.out.println("Насыпаем чай");
    }

    @Override
    void pour() {
        System.out.println("Заливаем водой");
    }

    @Override
    void makeDrink() {
        getRightCup();
        putIngredient();
        pour();
    }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Template pattern

1. В отдельном файле создать класс DrinkMaker с тремя абстрактными методами:

— void getRightCup() — выбрать подходящую чашку

— void putIngredient() — положить ингредиенты

— void pour() — залить жидкостью

2. В классе DrinkMaker создать и реализовать метод void makeDrink(), который готовит напиток в такой последовательности: выбирает чашку, кладет ингредиенты, заливает жидкостью.

3. В отдельных файлах создать классы LatteMaker и TeaMaker, которые наследуются от DrinkMaker.

4. Распредели следующие фразы между всеми методами в классах LatteMaker и TeaMaker, различные фразы для различных методов.

5. Каждый метод должен выводить в консоль свою фразу не пересекаясь с другими методами.



6. Фразы:

«Заливаем кипятком»

«Берем чашку для латте»

«Насыпаем чай»

«Берем чашку для чая»

«Заливаем молоком с пенкой»

«Делаем кофе«





Требования:

1. Класс DrinkMaker должен быть создан в отдельном файле и быть абстрактным.

2. В классе DrinkMaker должны содержаться объявления трех абстрактных методов getRightCup, putIngredient и pour.

3. В классе DrinkMaker должен быть реализован метод makeDrink который будет вызывать абстрактные методы этого класса в последовательности заданной условием.

4. Класс LatteMaker должен быть создан в отдельном файле и быть потомком класса DrinkMaker.

5. Класс TeaMaker должен быть создан в отдельном файле и быть потомком класса DrinkMaker.

6. Метод getRightCup в классе LatteMaker должен выводить на экран фразу "Берем чашку для латте".

7. Метод putIngredient в классе LatteMaker должен выводить на экран фразу "Делаем кофе".

8. Метод pour в классе LatteMaker должен выводить на экран фразу "Заливаем молоком с пенкой".

9. Метод getRightCup в классе TeaMaker должен выводить на экран фразу "Берем чашку для чая".

10. Метод putIngredient в классе TeaMaker должен выводить на экран фразу "Насыпаем чай".

11. Метод pour в классе TeaMaker должен выводить на экран фразу "Заливаем кипятком".
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
